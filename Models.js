// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  this.Step = (function(_super) {
    __extends(Step, _super);

    function Step() {
      _ref = Step.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Step.prototype.defaults = {
      type: 'given',
      text: ''
    };

    Step.prototype.initialize = function(_arg) {
      this.type = _arg.type, this.text = _arg.text;
    };

    return Step;

  })(Backbone.Model);

  this.Scenario = (function(_super) {
    __extends(Scenario, _super);

    function Scenario() {
      _ref1 = Scenario.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Scenario.prototype.defaults = {
      title: '',
      steps: new Backbone.Collection()
    };

    Scenario.prototype.initialize = function(_arg) {
      this.title = _arg.title, this.steps = _arg.steps;
    };

    Scenario.prototype.toJSON = function() {
      return {
        title: this.get('title'),
        steps: this.get('steps').toJSON()
      };
    };

    return Scenario;

  })(Backbone.Model);

  this.Story = (function(_super) {
    __extends(Story, _super);

    function Story() {
      _ref2 = Story.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Story.prototype.defaults = {
      description: '',
      scenarios: new Backbone.Collection()
    };

    Story.prototype.initialize = function(_arg) {
      this.description = _arg.description, this.scenarios = _arg.scenarios;
    };

    Story.prototype.toJSON = function() {
      return {
        description: this.get('description'),
        scenarios: this.get('scenarios').toJSON()
      };
    };

    Story.prototype.toCucumber = function() {
      var cuke, scenario, step, story, _i, _j, _len, _len1, _ref3, _ref4;
      story = this.toJSON();
      cuke = "Feature: Story\n\t" + story.description + "\n";
      _ref3 = story.scenarios;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        scenario = _ref3[_i];
        cuke += "\n\tScenario: " + scenario.title + "\n";
        _ref4 = scenario.steps;
        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
          step = _ref4[_j];
          cuke += "\t\t" + (step.type.capitalize()) + " " + step.text + "\n";
        }
      }
      return cuke;
    };

    return Story;

  })(Backbone.Model);

  this.StepDefinitions = (function() {
    function StepDefinitions(_arg) {
      this.steps = (_arg != null ? _arg : {
        steps: {
          'default': true
        }
      }).steps;
      this.toJSON = __bind(this.toJSON, this);
      this.add = __bind(this.add, this);
      this.hasStep = __bind(this.hasStep, this);
    }

    StepDefinitions.prototype.hasStep = function(type, text) {
      return this.steps[text] != null;
    };

    StepDefinitions.prototype.add = function(step) {
      console.log('adding step: ', step);
      return this.steps[step.get('text')] = true;
    };

    StepDefinitions.prototype.toJSON = function() {
      return this.steps;
    };

    return StepDefinitions;

  })();

}).call(this);
